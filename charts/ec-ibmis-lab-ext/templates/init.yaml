# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-init
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: init

spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "myapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: init
    spec:
      restartPolicy: Never
      serviceAccountName: {{ .Release.Name }}-lab
      # Wait for all of the services to be up before attempting initial configuration
      initContainers:
        - name: wait-for-igcproxy
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-infosvr-proxy
        - name: wait-for-kafka
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-kafka
        - name: wait-for-ibm-igc
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          command:
            - "/bin/bash"
            - "-c"
            - >
                until $(curl -c /tmp/cookies.txt -s -f -k --connect-timeout 5 -X POST -u ${IBM_USER}:${IBM_PASS} --url https://{{ .Release.Name }}-infosvr-proxy:${IBM_PORT}/ibm/iis/igc-rest/v1/search -H "Content-Type: application/json" -d '{"types":["category","term","information_governance_policy","information_governance_rule"],"pageSize":1,"workflowMode":"draft"}' | grep 'numTotal' >/dev/null); do
                curl -b /tmp/cookies.txt -s -f -k --connect-timeout 5 -X GET -u ${IBM_USER}:${IBM_PASS} --url https://{{ .Release.Name }}-infosvr-proxy:${IBM_PORT}/ibm/iis/igc-rest/v1/logout;
                echo waiting for {{ .Release.Name }}-infosvr-proxy to be accessible;
                sleep 2;
                done;
      # Then configure and startup the DataStage connector
      containers:
        - name: init
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          command:
            - "/bin/bash"
            - "-c"
            - >
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/server-type?typeName=IGC
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/organization-name?name=IBM
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/server-url-root?url=${PROXY_ENDPOINT}
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/event-bus
                --data '{"producer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"}, "consumer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"} }'
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/local-repository/mode/repository-proxy/connection
                --data '{"class":"Connection","connectorType":{"class":"ConnectorType","connectorProviderClassName":"org.odpi.egeria.connectors.ibm.igc.repositoryconnector.IGCOMRSRepositoryConnectorProvider"},"endpoint":{"class":"Endpoint","address":"'"${IBM_HOST}:${IBM_PORT}"'","protocol":"https"},"userId":"'"${IBM_USER}"'","clearPassword":"'"${IBM_PASS}"'","configurationProperties":{"defaultZones":["default"]}}'
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/cohorts/${EGERIA_COHORT}
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_IGC_SERVER}/instance
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${OMAS_SERVER}/local-repository/mode/local-graph-repository
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${OMAS_SERVER}/server-url-root?url=${PROXY_ENDPOINT}
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${OMAS_SERVER}/event-bus
                --data '{"producer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"}, "consumer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"} }'
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${OMAS_SERVER}/access-services/data-engine
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${OMAS_SERVER}/instance
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_DATASTAGE_SERVER}/local-repository/mode/in-memory-repository
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_DATASTAGE_SERVER}/data-engine-proxy-service/configuration
                --data '{"class":"DataEngineProxyConfig","accessServiceRootURL":"'"${PROXY_ENDPOINT}"'","accessServiceServerName":"'"${OMAS_SERVER}"'","eventsClientEnabled":true,"dataEngineConnection":{"class":"Connection","connectorType":{"class":"ConnectorType","connectorProviderClassName":"org.odpi.egeria.connectors.ibm.datastage.dataengineconnector.DataStageConnectorProvider"},"endpoint":{"class":"Endpoint","address":"'"${IBM_HOST}:${IBM_PORT}"'","protocol":"https"},"userId":"'"${IBM_USER}"'","clearPassword":"'"${IBM_PASS}"'","configurationProperties":{"limitToProjects":["minimal"]}},"pollIntervalInSeconds":60}'
                &&
                curl -f -k -w "\n  (%{http_code} - %{url_effective})\n" --silent --basic admin:admin -X POST
                ${PROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${IBM_DATASTAGE_SERVER}/instance
          resources:
            requests:
              memory: "16Mi"
              cpu: "100m"
            limits:
              memory: "64Mi"
              cpu: "500m"
...
