/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */
package org.odpi.egeria.connectors.ibm.igc.repositoryconnector.model;

/**
 * Captures the meaning and translation of the various components of an IGC GUID.
 *
 * This is necessary as internally IGC only uses a Repository ID ("RID") that is unique within a single instance of
 * IGC -- but not globally unique.  As these are not proper GUIDs, we need to provide a mechanism to automatically
 * ensure these are GUIDs with minimal impact on persistence, etc.
 *
 * Furthermore, there are some types in OMRS that have no separate type in IGC, but are rather generated by a type in
 * IGC that is already used for another OMRS type.  For these, we need to add a further prefix to ensure the GUID for
 * the generated entity from IGC is unique from the non-generated entity.
 *
 * Finally, given we are already embedding meaning such as that above in the GUID, for optimization purposes we have
 * decided to also encode the IGC data type into the GUID.  This will allow faster lookups of the IGC entities when
 * receiving a GUID vs. needing to first lookup the GUID to determine its type and only then be able to run another
 * query to retrieve all the properties relevant to that type.
 */
public abstract class IGCGuidHeader {

    protected static final String METADATA_COL_POSTFIX = ":";

    protected String metadataCollectionId;

    public IGCGuidHeader() {
        // do nothing
    }

    public IGCGuidHeader(String metadataCollectionId) {
        this.metadataCollectionId = metadataCollectionId;
    }

    /**
     * Retrieve the metadata collection ID component of this IGC GUID.
     *
     * @return String
     */
    public String getMetadataCollectionId() { return metadataCollectionId; }

    /**
     * Turn this IGC GUID into a unique String representation of the GUID.
     *
     * @return String
     */
    @Override
    public String toString() {
        return metadataCollectionId + METADATA_COL_POSTFIX;
    }

}
